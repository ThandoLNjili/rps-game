{"version":3,"sources":["Images/rock.png","Images/paper.png","Images/scissors.png","Components/Header.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Main","state","userScore","compScore","resultMessage","Math","floor","random","this","setState","prevState","userChoice","getComputerChoice","win","lose","onClick","game","src","Rock","alt","Paper","Scissors","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,kKCQ5BC,G,MANA,kBACX,yBAAKC,UAAU,UACX,sD,iDCCaC,E,2MACjBC,MAAQ,CACJC,UAAW,EACXC,UAAW,EACXC,cAAe,sB,mFAMf,MAFgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnDC,KAAKC,MAAsB,EAAhBD,KAAKE,a,4BAKrCC,KAAKC,SAAS,SAAAC,GACV,MAAO,CAACR,UAAWQ,EAAUR,UAAY,O,6BAK7CM,KAAKC,SAAS,SAAAC,GACV,MAAO,CAAEP,UAAWO,EAAUP,UAAY,O,2BAI7CQ,GAGD,OAAQA,EAFeH,KAAKI,qBAGxB,IAAK,KACDJ,KAAKC,SAAS,CAAEL,cAAe,kCAC/BI,KAAKK,MACL,MACJ,IAAK,KACDL,KAAKC,SAAS,CAAEL,cAAe,+BAC/BI,KAAKK,MACL,MACJ,IAAK,KACDL,KAAKC,SAAS,CAAEL,cAAe,kCAC/BI,KAAKK,MACL,MAEJ,IAAK,KACDL,KAAKC,SAAS,CAAEL,cAAe,+BAC/BI,KAAKM,OACL,MACJ,IAAK,KACDN,KAAKC,SAAS,CAAEL,cAAe,gCAC/BI,KAAKM,OACL,MACJ,IAAK,KACDN,KAAKC,SAAS,CAAEL,cAAe,mCAC/BI,KAAKM,OACL,MAEJ,IAAK,KACDN,KAAKC,SAAS,CAAEL,cAAc,+DAC9B,MACJ,IAAK,KACDI,KAAKC,SAAS,CAAEL,cAAc,iEAC9B,MACJ,IAAK,KACDI,KAAKC,SAAS,CAAEL,cAAc,uEAC9B,MACJ,QACII,KAAKC,SAAS,CAAEL,cAAe,2B,+BAIjC,IAAD,OACL,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,oBAAf,QACA,yBAAKA,UAAU,wBAAf,QACA,0BAAMA,UAAU,cAAcS,KAAKP,MAAMC,WAH7C,IAG+D,0BAAMH,UAAU,kBAAkBS,KAAKP,MAAME,YAG5G,yBAAKJ,UAAU,UACX,2BAAIS,KAAKP,MAAMG,gBAGnB,yBAAKL,UAAU,WACX,yBAAKA,UAAU,YACX,yBAAKgB,QAAS,kBAAM,EAAKC,KAAK,MAAMC,IAAKC,IAAMC,IAAI,MAEvD,yBAAKpB,UAAU,YACX,yBAAKgB,QAAS,kBAAM,EAAKC,KAAK,MAAMC,IAAKG,IAAOD,IAAI,MAExD,yBAAKJ,QAAS,kBAAM,EAAKC,KAAK,MAAMjB,UAAU,YAC1C,yBAAKkB,IAAKI,IAAUF,IAAI,OAIhC,uBAAGpB,UAAU,kBAAb,wB,GA9FkBuB,IAAMC,WCazBC,E,iLATX,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUwB,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e38fac47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.602f85e5.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.619d1ee7.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.9defba7c.png\";","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className='header'>\r\n        <h1>Rock Paper Scissors</h1>\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport Rock from '../Images/rock.png';\r\nimport Paper from '../Images/paper.png';\r\nimport Scissors from '../Images/scissors.png';\r\n\r\nexport default class Main extends React.Component {\r\n    state = {\r\n        userScore: 0,\r\n        compScore: 0,\r\n        resultMessage: 'Choose Your Weapon'\r\n    }\r\n\r\n    getComputerChoice() {\r\n        const choices = ['r', 'p', 's', 's', 'r', 'p', 'p', 's', 'r', 's', 'r', 'p'];\r\n        const randomNumber = Math.floor(Math.random() * 3);\r\n        return choices[randomNumber];\r\n    }\r\n\r\n    win() {\r\n        this.setState(prevState => {\r\n            return {userScore: prevState.userScore + 1 }\r\n        });\r\n    }\r\n\r\n    lose() {\r\n        this.setState(prevState => {\r\n            return { compScore: prevState.compScore + 1 }\r\n        });\r\n    }\r\n\r\n    game(userChoice) {\r\n        const computerChoice = this.getComputerChoice();\r\n\r\n        switch (userChoice + computerChoice) {\r\n            case 'rs':\r\n                this.setState({ resultMessage: 'Rock beats scissors. You Win!' });\r\n                this.win();\r\n                break;\r\n            case 'pr':\r\n                this.setState({ resultMessage: 'Paper beats rock. You Win!' });\r\n                this.win();\r\n                break;\r\n            case 'sp':\r\n                this.setState({ resultMessage: 'Scissors beat paper. You Win!' });\r\n                this.win();\r\n                break;\r\n\r\n            case 'sr':\r\n                this.setState({ resultMessage: 'I chose rock. Take Your L!' });\r\n                this.lose();\r\n                break;\r\n            case 'rp':\r\n                this.setState({ resultMessage: 'I chose paper. Take Your L!' });\r\n                this.lose();\r\n                break;\r\n            case 'ps':\r\n                this.setState({ resultMessage: 'I chose scissors. Take Your L!' });\r\n                this.lose();\r\n                break;\r\n\r\n            case 'rr':\r\n                this.setState({ resultMessage: `There's no rock on rock violence here. Lets call it a tie.` });\r\n                break;\r\n            case 'pp':\r\n                this.setState({ resultMessage: `There's no paper on paper violence here. Lets call it a tie.` });\r\n                break;\r\n            case 'ss':\r\n                this.setState({ resultMessage: `There's no scissors on scissors violence here. Lets call it a tie.` });\r\n                break;\r\n            default:\r\n                this.setState({ resultMessage: 'Choose Your Weapon!' });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div className=\"score-board\">\r\n                    <div className=\"user-label badge\">user</div>\r\n                    <div className=\"computer-label badge\">comp</div>\r\n                    <span className=\"user-score\">{this.state.userScore}</span>:<span className=\"computer-score\">{this.state.compScore}</span>\r\n                </div>\r\n\r\n                <div className=\"result\">\r\n                    <p>{this.state.resultMessage}</p>\r\n                </div>\r\n\r\n                <div className=\"choices\">\r\n                    <div className=\"choice r\">\r\n                        <img onClick={() => this.game('r')} src={Rock} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"choice p\">\r\n                        <img onClick={() => this.game('p')} src={Paper} alt=\"\" />\r\n                    </div>\r\n                    <div onClick={() => this.game('s')} className=\"choice s\">\r\n                        <img src={Scissors} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <p className=\"action-message\">Make Your Move.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export default Main;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './Components/Header';\nimport Main from './Components/Main';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}